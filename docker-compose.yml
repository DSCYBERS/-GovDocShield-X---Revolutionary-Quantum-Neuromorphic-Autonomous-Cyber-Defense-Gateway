# Docker Compose for GovDocShield X
# Quantum-Neuromorphic Cyber Defense Platform

version: '3.8'

services:
  # Main API service
  govdocshield-api:
    build:
      context: .
      target: production
    container_name: govdocshield-api
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - GOVDOCSHIELD_ENV=production
      - QUANTUM_MODE=enabled
      - NEUROMORPHIC_MODE=enabled
      - BIO_INSPIRED_MODE=enabled
      - DNA_STORAGE_MODE=enabled
      - LOG_LEVEL=INFO
      - DATABASE_URL=postgresql://govdocshield:quantum_secure@postgres:5432/govdocshield
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - uploads:/app/uploads
      - dna_storage:/app/dna_storage
    depends_on:
      - postgres
      - redis
    networks:
      - govdocshield-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Web Dashboard
  govdocshield-dashboard:
    build:
      context: .
      target: dashboard
    container_name: govdocshield-dashboard
    ports:
      - "8501:8501"
    environment:
      - GOVDOCSHIELD_API_URL=http://govdocshield-api:8080
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    depends_on:
      - govdocshield-api
    networks:
      - govdocshield-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: govdocshield-postgres
    environment:
      - POSTGRES_DB=govdocshield
      - POSTGRES_USER=govdocshield
      - POSTGRES_PASSWORD=quantum_secure
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - govdocshield-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: govdocshield-redis
    command: redis-server --appendonly yes --requirepass quantum_cache
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - govdocshield-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Message Queue (Apache Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: govdocshield-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - govdocshield-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: govdocshield-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - govdocshield-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: govdocshield-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - govdocshield-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: govdocshield-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=govdocshield_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - govdocshield-network
    restart: unless-stopped

  # NGINX Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: govdocshield-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - govdocshield-api
      - govdocshield-dashboard
    networks:
      - govdocshield-network
    restart: unless-stopped

  # File Virus Scanner (ClamAV)
  clamav:
    image: clamav/clamav:1.2.0
    container_name: govdocshield-clamav
    volumes:
      - clamav_data:/var/lib/clamav
      - uploads:/app/uploads:ro
    networks:
      - govdocshield-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Quantum Simulator (if available)
  quantum-simulator:
    image: rigetti/qvm:latest
    container_name: govdocshield-quantum
    ports:
      - "5555:5555"
    environment:
      - QVM_VERBOSE=true
    networks:
      - govdocshield-network
    restart: unless-stopped
    profiles:
      - quantum
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G

networks:
  govdocshield-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  clamav_data:
    driver: local
  uploads:
    driver: local
  dna_storage:
    driver: local